name: 🐳 Build and Push to Aliyun ACR

# 触发条件配置
on:
  workflow_dispatch:                   # 允许手动触发

# 环境变量配置
env:
  IMAGE_NAME: lsky-pro		          # 镜像名称
  ALIYUN_REGION: cn-chengdu        	# 阿里云区域（根据你的仓库修改）
  NAMESPACE: byte-blazer	          # 阿里云命名空间:cite[1]:cite[7]

jobs:
  build-and-push:
    name: 🏗️ Build and Push to Aliyun ACR
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
      # 步骤1: 检出代码
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0              # 获取完整历史记录用于元数据生成

      # 步骤2: 设置Docker Buildx（支持高级构建特性）
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container    # 使用容器驱动，支持多平台构建
          install: true               # 确保安装Buildx

      # 步骤3: 提取元数据（自动生成标签）
      - name: 🏷️ Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.ALIYUN_REGION }}.aliyuncs.com/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch     # 分支名称作为标签
            type=ref,event=tag        # Git标签作为标签
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha                  # Commit SHA作为标签
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      # 步骤4: 登录阿里云容器镜像服务
      - name: 🔐 Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ALIYUN_REGION }}.aliyuncs.com
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}      # 阿里云用户名:cite[1]:cite[4]
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}      # 阿里云密码或访问令牌:cite[1]:cite[4]

      # 步骤5: 构建并推送Docker镜像
      - name: 🚀 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .                  # 使用当前目录作为构建上下文
          file: ./Dockerfile         # Dockerfile路径（如果在根目录）
          push: ${{ github.event_name != 'pull_request' }}  # PR时不推送
          tags: ${{ steps.meta.outputs.tags }}              # 使用元数据生成的标签
          labels: ${{ steps.meta.outputs.labels }}          # 使用元数据生成的标签
          cache-from: type=gha,scope=${{ github.ref }}-${{ env.IMAGE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ github.ref }}-${{ env.IMAGE_NAME }}
          provenance: false           # 如需生成供应链证明可设为true

      # 步骤6: 上传构建日志（用于调试）
      - name: 📋 Upload build logs
        if: always()                  # 无论成功失败都上传
        uses: actions/upload-artifact@v4
        with:
          name: buildkit-logs
          path: /tmp/buildkit-log*
          retention-days: 7

  # 可选：安全扫描步骤
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success() && github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ALIYUN_REGION }}.aliyuncs.com/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
